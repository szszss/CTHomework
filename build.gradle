buildscript {
    repositories {
		maven{url 'http://maven.oschina.net/content/groups/public/'}
    }
	
    dependencies {
		classpath 'ca.coglinc:javacc-gradle-plugin:2.3.1'
    }
}

allprojects  {

	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: "ca.coglinc.javacc"
	
	compileJava{options.encoding = 'utf-8'}
	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

	repositories {
		maven{url 'http://maven.oschina.net/content/groups/public/'}
	}
	
	configurations{
		javacc
	}

	dependencies {
		javacc 'net.java.dev.javacc:javacc:6.1.2'
		testCompile 'junit:junit:4.12'
	}
	
	File javaccjar = null;
	configurations.javacc.files.each { 
		if(javaccjar == null && it.getName().endsWith(".jar") && it.getName().indexOf("source") < 0)
		{
			javaccjar = it;
		}
	}
	
	eclipseJdt << {
		File f = file('.settings/org.eclipse.core.resources.prefs')
		f.write('eclipse.preferences.version=1\n')
		f.append('encoding/<project>=utf-8')
		if(javaccjar != null) {
			f = file('.settings/sf.eclipse.javacc.prefs')
			f.write('RUNTIME_JJJAR=' + javaccjar.toString().replace("\\", "\\\\"))
		}
	}

	sourceSets {
		main {
			java {
				srcDir "src/main/javacc"
			}
		}
	}
}

project(":lexer") {
	ext {
		jjtPackage = 'src/main/javacc/lexer'
	}
	compileJavacc {
		inputDirectory = file(jjtPackage)
		outputDirectory = file(jjtPackage)
	}
	compileJavacc.doLast {
		delete file(jjtPackage + '/tmp')
	}
	eclipseClasspath.dependsOn("compileJavacc")
}

project(":parser") {
	ext {
		jjtPackage = 'src/main/javacc/parser'
	}
	compileJavacc {
		inputDirectory = file(jjtPackage)
		outputDirectory = file(jjtPackage)
	}
	compileJjtree {
		inputDirectory = file(jjtPackage)
		outputDirectory = file(jjtPackage)
	}
	compileJavacc.doLast {
		delete file(jjtPackage + '/tmp')
	}
	eclipseClasspath.dependsOn("compileJjtree", "compileJavacc")
}

tasks.eclipse.doLast {
    delete ".project"
}